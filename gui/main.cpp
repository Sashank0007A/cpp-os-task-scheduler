#include <SFML/Graphics.hpp>#include "../scheduler.h"#include <iostream>#include <iomanip>#include <map>// GUI constantsconst int CHART_HEIGHT = 50;const int CHART_MARGIN = 60;const int LABEL_WIDTH = 150;const int TIME_UNIT_WIDTH = 50;const int WINDOW_WIDTH = 1200;void drawChart(sf::RenderWindow& window, const std::vector<GanttBlock>& chart, int yOffset, const std::string& title, sf::Font& font) {    sf::Text label(title, font, 22);    label.setFillColor(sf::Color::White);    label.setPosition(10, yOffset - 35);    window.draw(label);    for (size_t i = 0; i < chart.size(); ++i) {        const auto& block = chart[i];        int x = LABEL_WIDTH + block.startTime * TIME_UNIT_WIDTH;        int width = block.burstTime * TIME_UNIT_WIDTH;        sf::RectangleShape bar(sf::Vector2f(width - 2, CHART_HEIGHT));        bar.setPosition(x, yOffset);        bar.setFillColor(block.color);        window.draw(bar);        sf::Text pidText(block.pid, font, 18);        pidText.setFillColor(sf::Color::White);        pidText.setPosition(x + width / 2 - 10, yOffset + 10);        window.draw(pidText);        if (i == 0 || block.startTime != chart[i - 1].startTime + chart[i - 1].burstTime) {            sf::Text startText(std::to_string(block.startTime), font, 14);            startText.setFillColor(sf::Color::White);            startText.setPosition(x - 5, yOffset + CHART_HEIGHT + 5);            window.draw(startText);        }        int endTime = block.startTime + block.burstTime;        sf::Text endText(std::to_string(endTime), font, 14);        endText.setFillColor(sf::Color::White);        endText.setPosition(x + width - 10, yOffset + CHART_HEIGHT + 5);        window.draw(endText);    }}int main() {    // Load input    std::vector<Process> processes = parseInput("input.txt");    // Schedule all    auto fcfs = fcfsSchedule(processes);    auto sjf = sjfSchedule(processes);    auto pri = prioritySchedule(processes);    auto rr  = roundRobinSchedule(processes, 2);    // ‚è±Ô∏è Print Performance Table    auto fcfsM = calculateMetrics(fcfs, processes);    auto sjfM = calculateMetrics(sjf, processes);    auto priM = calculateMetrics(pri, processes);    auto rrM  = calculateMetrics(rr,  processes);        printScheduleTable("FCFS Scheduling", fcfs, processes);    printScheduleTable("SJF (Non-Preemptive) Scheduling", sjf, processes);    printScheduleTable("Priority Scheduling (Non-Preemptive)", pri, processes, true);    printScheduleTable("Round Robin Scheduling (Time Quantum = 2)", rr, processes);    std::cout << "\nüìä Performance Table:\n";    std::cout << std::left << std::setw(15) << "Algorithm"              << std::setw(12) << "Avg TAT"              << std::setw(12) << "Avg WT" << "\n";    std::cout << "---------------------------------------\n";    std::cout << std::left << std::setw(15) << "FCFS"     << std::setw(12) << fcfsM.first << std::setw(12) << fcfsM.second << "\n";    std::cout << std::left << std::setw(15) << "SJF"      << std::setw(12) << sjfM.first  << std::setw(12) << sjfM.second << "\n";    std::cout << std::left << std::setw(15) << "Priority" << std::setw(12) << priM.first  << std::setw(12) << priM.second << "\n";    std::cout << std::left << std::setw(15) << "RoundRobin" << std::setw(12) << rrM.first  << std::setw(12) << rrM.second << "\n\n";    // üé® GUI    sf::Font font;    if (!font.loadFromFile("/System/Library/Fonts/Supplemental/Arial.ttf")) {        std::cerr << "Font not found!\n";        return 1;    }    int totalRows = 4;    int windowHeight = totalRows * (CHART_HEIGHT + CHART_MARGIN) + 80;    sf::RenderWindow window(sf::VideoMode(WINDOW_WIDTH, windowHeight), "CPU Scheduler - Gantt Chart Visualizer");    while (window.isOpen()) {        sf::Event event;        while (window.pollEvent(event))            if (event.type == sf::Event::Closed)                window.close();        window.clear(sf::Color::Black);        int baseOffset = (windowHeight - totalRows * (CHART_HEIGHT + CHART_MARGIN)) / 2;        drawChart(window, fcfs, baseOffset + 0 * (CHART_HEIGHT + CHART_MARGIN), "FCFS Scheduling", font);        drawChart(window, sjf,  baseOffset + 1 * (CHART_HEIGHT + CHART_MARGIN), "SJF Scheduling", font);        drawChart(window, pri,  baseOffset + 2 * (CHART_HEIGHT + CHART_MARGIN), "Priority Scheduling", font);        drawChart(window, rr,   baseOffset + 3 * (CHART_HEIGHT + CHART_MARGIN), "Round Robin (Q=2)", font);        window.display();    }    return 0;}